% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/VecDecomPlot.R
\name{VecDecomPlot}
\alias{VecDecomPlot}
\title{Plotting function for vector decomposition and remainder fields}
\usage{
VecDecomPlot(field, dens, x.bound, y.bound, x.lim, y.lim,
  arrow.type = "equal", tail.length = 0.25, head.length = 0.25, ...)
}
\arguments{
\item{field}{list output from \code{\link{VecDecomAll}}.}

\item{dens}{two-element vector respectively specifying the number of respective arrows in the x and y directions.}

\item{x.bound}{two-element vector for the x domain boundries used for the quasi-potential simulation.}

\item{y.bound}{two-element vector for the y domain boundries used for the quasi-potential simulation.}

\item{x.lim}{I DO NOT KNOW BUT NOW devtools::check() IS OK}

\item{y.lim}{I DO NOT KNOW BUT NOW devtools::check() IS OK}

\item{arrow.type}{sets the type of line segments plotted. If set to "proportional" the length of the line segments reflects the magnitude of the derivative. If set to "equal" the line segments take equal lengths, simply reflecting the gradient of the derivative(s). Defaults to "equal".}

\item{tail.length}{multiplies the current length of the tail (both proportional and equal arrow.types) by the specified factor.  The argument defaults to 1, which is length of the longest vector within the domain boundaries (i.e., the entire field).}

\item{...}{passes arguments to both \code{\link{plot}} and \code{\link{arrows}}.}
}
\description{
This function calculates the vector and remainder fields.
}
\examples{
#Example 1 from article
equationx = "1.5*x*(1.0-(x/45.0))-(y*x*5.0)/(18.0+x)"
equationy = "-4.0*y+((10.0*x*y)/(18.0+x))"
# 0.6.1 vector field
VDV <- VecDecomVec(x.num.steps=4100, y.num.steps=4100, x.rhs=equationx,
  y.rhs=equationy, x.bound=c(-0.5,20), y.bound=c(-0.5,20))
VecDecomPlot(field=list(VDV[,,1],VDV[,,2]), dens=c(50,50), x.bound=c(-0.5,20), y.bound=c(-0.5,20))
}
\keyword{field}
\keyword{plot}
\keyword{plot,}
\keyword{remainder}
\keyword{vector}

