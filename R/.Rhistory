par(mar = c(4, 4, 4 , 4))#
	TSDensity(ts.ex2, dim = 2, xlab  ="", ylab = "", xlim = c(2.5, 6.5), ylim = c(2.5, 6.5), contour.levels = 25, contour.lines = T, las = 1, col2d = tsdens.col, contour.lwd = 0.25, kde2d.n = 200, )#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)#
    mtext(expression(italic(x)), side = 1, line = 2.5)#
	mtext(expression(italic(y)), side = 2, line = 2.5)
k2 <- MASS::kde2d(ts.ex2[,2], ts.ex2[,3], n = 100)#
k2dns <- k2$z/sum(k2$z)#
#
k2cut <- cut(k2dns, 100, label = FALSE)#
crramp <- colorRampPalette(tsdens.col)#
colr <- crramp(100)#
# png(file = paste(plotwd, "/Ex2_Dens_2D.png", sep = ""), width = 400, height = 400)#
	par(mar = c(4, 4, 4 , 4))#
	TSDensity(ts.ex2, dim = 2, xlab  ="", ylab = "", xlim = c(2.5, 6.5), ylim = c(2.5, 6.5), contour.levels = 25, contour.lines = T, las = 1, col2d = tsdens.col, contour.lwd = 0.25, kde2d.n = 100, xaxs = "i", yaxs = "i")#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)#
    mtext(expression(italic(x)), side = 1, line = 2.5)#
	mtext(expression(italic(y)), side = 2, line = 2.5)#
	# dev.off()
k2 <- MASS::kde2d(ts.ex2[,2], ts.ex2[,3], n = 20)#
k2dns <- k2$z/sum(k2$z)#
#
k2cut <- cut(k2dns, 100, label = FALSE)#
crramp <- colorRampPalette(tsdens.col)#
colr <- crramp(100)#
png(file = paste(plotwd, "/Ex2_Dens_2D.png", sep = ""), width = 400, height = 400)#
	par(mar = c(4, 4, 4 , 4))#
	TSDensity(ts.ex2, dim = 2, xlab  ="", ylab = "", xlim = c(2.5, 6.5), ylim = c(2.5, 6.5), contour.levels = 25, contour.lines = T, las = 1, col2d = tsdens.col, contour.lwd = 0.25, kde2d.n = 20, xaxs = "i", yaxs = "i")#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)#
    mtext(expression(italic(x)), side = 1, line = 2.5)#
	mtext(expression(italic(y)), side = 2, line = 2.5)#
	dev.off()
png(file = paste(plotwd, "/Ex2_Dens_2D.png", sep = ""), width = 400, height = 400)#
	par(mar = c(4, 5, 4 , 4))#
	TSDensity(ts.ex2, dim = 2, xlab  ="", ylab = "", xlim = c(2.5, 6.5), ylim = c(2.5, 6.5), contour.levels = 25, contour.lines = T, las = 1, col2d = tsdens.col, contour.lwd = 0.25, kde2d.n = 20, xaxs = "i", yaxs = "i")#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)#
    mtext(expression(italic(x)), side = 1, line = 2.5)#
	mtext(expression(italic(y)), side = 2, line = 2.5)#
	dev.off()
k2 <- MASS::kde2d(ts.ex2[,2], ts.ex2[,3], n = 200)#
k2dns <- k2$z/sum(k2$z)#
#
k2cut <- cut(k2dns, 100, label = FALSE)#
crramp <- colorRampPalette(tsdens.col)#
colr <- crramp(100)#
png(file = paste(plotwd, "/Ex2_Dens_2D.png", sep = ""), width = 400, height = 400)#
	par(mar = c(4, 4, 5 , 5))#
	TSDensity(ts.ex2, dim = 2, xlab  ="", ylab = "", xlim = c(2.5, 6.5), ylim = c(2.5, 6.5), contour.levels = 25, contour.lines = T, las = 1, col2d = tsdens.col, contour.lwd = 0.25, kde2d.n = 200, xaxs = "i", yaxs = "i")#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)#
    mtext(expression(italic(x)), side = 1, line = 2.5)#
	mtext(expression(italic(y)), side = 2, line = 2.5)#
	dev.off()
ts.ex1 <- as.matrix(read.table(file = paste(plotwd, "/Ex1_TS_data.csv", sep = ""), header = T))
var.eqn.x <- "(alpha*x)*(1-(x/beta)) - ((delta*(x^2)*y)/(kappa+(x^2)))"#
var.eqn.y <- "((gamma*(x^2)*y)/(kappa+(x^2))) - mu*(y^2)"#
model.state <- c(x = 1, y = 2)#
model.parms <- c(alpha = 1.54, beta = 10.14, delta = 1, gamma = 0.476, kappa = 1, mu = 0.112509)#
model.sigma <- 0.05#
model.time <- 12500#
model.deltat <- 0.025#
	# ts.ex1 <- TSTraj(y0 = model.state, time = model.time, deltat = model.deltat, x.rhs = var.eqn.x, y.rhs = var.eqn.y, parms = model.parms, sigma = model.sigma)#
	# write.table(ts.ex1, file = paste(plotwd, "/Ex1_TS_data.csv", sep = ""), row.names = F, col.names = T)#
	# write.table(ts.ex1, file = paste(plotwd, "/Ex1_TS_data.csv", sep = ""), row.names = F, col.names = T)
TSDensity(ts.ex1, dim = 1)
k2 <- MASS::kde2d(ts.ex1[,2], ts.ex1[,3], n = 200)#
k2dns <- k2$z/sum(k2$z)#
#
k2cut <- cut(k2dns, 100, label = FALSE)#
crramp <- colorRampPalette(tsdens.col)#
colr <- crramp(100)#
#
png(file = paste(plotwd, "/Ex1_Dens_2D.png", sep = ""), width = 400, height = 400)#
	par(mar = c(4, 4, 4 , 4))#
	TSDensity(ts.ex1, dim = 2, xlab  ="", ylab = "", xlim = c(0.5, 6), ylim = c(0.5, 6), contour.levels = 25, contour.lines = T, las = 1, col2d = tsdens.col, contour.lwd = 0.2, kde2d.n = 200, xaxs = "i", yaxs = "i")#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)#
    mtext(expression(italic(x)), side = 1, line = 2.5)#
	mtext(expression(italic(y)), side = 2, line = 2.5)#
	dev.off()
str(ex1.global)
eqn.x <- "-(y-5) + (0.2)*(x-4)*(1-(x-4)^2-(y-5)^2) "
eqn.y <- "(x-4) + (0.2)*(y-5)*(1-(x-4)^2-(y-5)^2)"
eq1.qp <- QPotential(x.rhs = eqn.x, x.start = 4.15611, x.bound = c(-0.5, 7.5), x.num.steps = 4000, y.rhs = eqn.y, y.start = 5.98774, y.bound = c(-0.5, 7.5), y.num.steps = 4000)
write.table(eq1.qp, file = paste(plotwd, "/Ex2_QP_data.csv", sep = ""), row.names = F, col.names = F)
ex1.global <- as.matrix(read.table(file = paste(plotwd, "/Ex2_QP_data.csv", sep = ""), header = F))
QPContour(surface = ex1.global, dens = c(100, 100), x.bound = c(-0.5, 7.5), y.bound = c(-0.5, 7.5), c.parm = 10, xlab = expression(italic("x")), ylab = expression(italic("y")), col.contour = rev(c("#FF8E00", "#FFDA00", "#ED002F", "#0A67A3")), n.contour.lines = 15, xlim = c(1.5, 7.5), ylim = c(1.5, 7.5))
QPContour(surface = ex1.global, dens = c(100, 100), x.bound = c(-0.5, 7.5), y.bound = c(-0.5, 7.5), c.parm = 10, xlab = expression(italic("x")), ylab = expression(italic("y")), col.contour = qp.col, n.contour.lines = 15, xlim = c(1.5, 7.5), ylim = c(1.5, 7.5))
k2dns <- seq(min(eq1.qp, na.rm = T), max(eq1.qp, na.rm = T), 0.01)
k2cut <- cut(k2dns, 100, label = FALSE)
crramp <- colorRampPalette(qp.col)
colr <- crramp(100)
eq1.qp <- as.matrix(read.table(file = paste(plotwd, "/Ex2_QP_data.csv", sep = ""), header = F))#
png(file = paste(plotwd, "/Ex2_QP_contour.png", sep = ""), width = 400, height = 400)#
	par(oma = c(0,1,0,2))#
	QPContour(surface = eq1.qp, dens = c(1000, 1000), x.bound = c(-0.5, 7.5), y.bound = c(-0.5, 7.5), c.parm = 10, xlab = expression(italic("x")), ylab = expression(italic("y")), col.contour = qp.col, n.contour.lines = 15, xlim = c(1.5, 7.5), ylim = c(1.5, 7.5))#
	k2dns <- seq(min(eq1.qp, na.rm = T), max(eq1.qp, na.rm = T), 0.01)#
	k2cut <- cut(k2dns, 100, label = FALSE)#
	crramp <- colorRampPalette(qp.col)#
	colr <- crramp(100)#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)#
	dev.off()
var.eqn.x <- "x*((1+alpha1)-x*x-x*y-y*y)"#
var.eqn.y <- "y*((1+alpha2)-x*x-x*y-y*y)"#
model.state <- c(x = 0.5, y = 0.5)#
model.parms <- c(alpha1 = 1.25, alpha2 = 2)#
model.sigma <- 0.8#
model.time <- 5000#
model.deltat <- 0.01
ts.ex3 <- TSTraj(y0 = model.state, time = model.time, deltat = model.deltat, x.rhs = var.eqn.x, y.rhs = var.eqn.y, parms = model.parms, sigma = model.sigma)
write.table(ts.ex3, file = paste(plotwd, "/Ex3_TS_data.csv", sep = ""), row.names = F, col.names = T)
ts.ex3 <- as.matrix(read.table(file = paste(plotwd, "/Ex3_TS_data.csv", sep = ""), header = T))
png(file = paste(plotwd, "/Ex3_TS_1D.png", sep = ""), width = 600, height = 350)
dev.off()
TSPlot(ts.ex3, deltat = model.deltat)
k2 <- MASS::kde2d(ts.ex3[,2], ts.ex3[,3], n = 200)#
k2dns <- k2$z/sum(k2$z)#
#
k2cut <- cut(k2dns, 100, label = FALSE)#
crramp <- colorRampPalette(tsdens.col)#
colr <- crramp(100)
TSDensity(ts.ex3, dim = 2, xlab  ="", ylab = "", xlim = c(-3, 3), ylim = c(-3, 3), contour.levels = 20, contour.lines = T, las = 1, col2d = tsdens.col , contour.lwd = 0.1, kde2d.n = 20)
legend.col(col = colr, lev = k2dns, xadj = 0.1)
mtext(expression(italic(x)), side = 1, line = 2.5)
mtext(expression(italic(y)), side = 2, line = 2.5)
png(file = paste(plotwd, "/Ex3_Dens_2D.png", sep = ""), width = 400, height = 400)#
	par(mar = c(4, 4, 4 , 4))#
	TSDensity(ts.ex3, dim = 2, xlab  ="", ylab = "", xlim = c(-3, 3), ylim = c(-3, 3), contour.levels = 20, contour.lines = T, las = 1, col2d = tsdens.col , contour.lwd = 0.1, kde2d.n = 200)#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)#
    mtext(expression(italic(x)), side = 1, line = 2.5)#
	mtext(expression(italic(y)), side = 2, line = 2.5)#
	dev.off()
png(file = paste(plotwd, "/Ex3_Dens_2D.png", sep = ""), width = 400, height = 400)#
	par(mar = c(4, 4, 5, 5))#
	TSDensity(ts.ex3, dim = 2, xlab  ="", ylab = "", xlim = c(-3, 3), ylim = c(-3, 3), contour.levels = 20, contour.lines = T, las = 1, col2d = tsdens.col , contour.lwd = 0.1, kde2d.n = 200)#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)#
    mtext(expression(italic(x)), side = 1, line = 2.5)#
	mtext(expression(italic(y)), side = 2, line = 2.5)#
	dev.off()
png(file = paste(plotwd, "/Ex3_Dens_2D.png", sep = ""), width = 400, height = 400)#
	par(mar = c(4, 4, 5, 5))#
	TSDensity(ts.ex3, dim = 2, xlab  ="", ylab = "", xlim = c(-3, 3), ylim = c(-3, 3), contour.levels = 20, contour.lines = T, las = 1, col2d = tsdens.col , contour.lwd = 0.1, kde2d.n = 200, xaxs = "i", yaxs = "i")#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)#
    mtext(expression(italic(x)), side = 1, line = 2.5)#
	mtext(expression(italic(y)), side = 2, line = 2.5)#
	dev.off()
equation.x = "x*((1+1.25)-x*x-x*y-y*y)"#
equation.y = "y*((1+2)-x*x-x*y-y*y)"#
bounds.x = c(-3, 3)#
bounds.y = c(-3, 3)#
step.number.x = 6000#
step.number.y = 6000#
eq1.x = 0#
eq1.y = -1.73205#
eq2.x = 0#
eq2.y = 1.73205
ls()
eq1.local <- QPotential(x.rhs = equation.x, x.start = eq1.x, x.bound = bounds.x, x.num.steps = step.number.x, y.rhs = equation.y, y.start = eq1.y, y.bound = bounds.y, y.num.steps = step.number.y)#
eq2.local <- QPotential(x.rhs = equation.x, x.start = eq2.x, x.bound = bounds.x, x.num.steps = step.number.x, y.rhs = equation.y, y.start = eq2.y, y.bound = bounds.y, y.num.steps = step.number.y)#
#
ex3.global <- QPGlobal(local.surfaces = list(eq1.local, eq2.local), unstable.eq.x = c(0, -1.5, 1.5), unstable.eq.y = c(0, 0, 0), x.bound = bounds.x, y.bound = bounds.y)#
#
	write.table(ex3.global, file = paste(plotwd, "/Ex3_QP_data.csv", sep = ""), row.names = F, col.names = F)
library(devtools)#
install_github("bmarkslash7/QPot")#
library(QPot)#
library(MASS)#
plotwd <- "~/DropBox/Projects/*QuasiPotential/PaperFigures"#
#
legend.col <- function(col, lev, xadj){ #
	opar <- par#
	n <- length(col)#
	bx <- par("usr")#
	box.cx <- c(bx[2] + (bx[2] - bx[1]) / 1000 + 0, bx[2] + (bx[2] - bx[1]) / 1000 + (bx[2] - bx[1]) / 50)#
	box.cy <- c(bx[3], bx[3])#
	box.sy <- (bx[4] - bx[3]) / n#
	xx <- rep(box.cx, each = 2) + xadj#
	par(xpd = TRUE)#
	for(i in 1:n){#
	yy <- c(box.cy[1] + (box.sy * (i - 1)),#
	box.cy[1] + (box.sy * (i)),#
	box.cy[1] + (box.sy * (i)),#
	box.cy[1] + (box.sy * (i - 1)))#
	polygon(xx, yy, col = col[i], border = col[i])#
	}#
	par(new = TRUE)#
	plot(0, 0, type = "n", ylim = c(min(lev), max(lev)), yaxt = "n", ylab = "", xaxt = "n", xlab = "", frame.plot = FALSE)#
	axis(side = 4, las = 2, tick = FALSE, line = (.25 + xadj))#
	par <- opar#
	}#
#
tsdens.col <- c("lightsteelblue", "white", "indianred")#
qp.col <- c("#FDE725FF", "#E3E418FF", "#C7E020FF", "#ABDC32FF", "#8FD744FF", "#75D054FF", "#5DC963FF", "#47C06FFF", "#35B779FF", "#28AE80FF", "#20A486FF", "#1F9A8AFF", "#21908CFF", "#24868EFF", "#287C8EFF", "#2C728EFF", "#31688EFF", "#355D8DFF", "#3B528BFF", "#404688FF", "#443A83FF", "#472D7BFF", "#481F71FF","#471163FF", "#440154FF")
equation.x = "x*((1+1.25)-x*x-x*y-y*y)"#
equation.y = "y*((1+2)-x*x-x*y-y*y)"#
bounds.x = c(-3, 3)#
bounds.y = c(-3, 3)#
step.number.x = 6000#
step.number.y = 6000#
eq1.x = 0#
eq1.y = -1.73205#
eq2.x = 0#
eq2.y = 1.73205#
#
eq1.local <- QPotential(x.rhs = equation.x, x.start = eq1.x, x.bound = bounds.x, x.num.steps = step.number.x, y.rhs = equation.y, y.start = eq1.y, y.bound = bounds.y, y.num.steps = step.number.y)#
eq2.local <- QPotential(x.rhs = equation.x, x.start = eq2.x, x.bound = bounds.x, x.num.steps = step.number.x, y.rhs = equation.y, y.start = eq2.y, y.bound = bounds.y, y.num.steps = step.number.y)#
#
ex3.global <- QPGlobal(local.surfaces = list(eq1.local, eq2.local), unstable.eq.x = c(0, -1.5, 1.5), unstable.eq.y = c(0, 0, 0), x.bound = bounds.x, y.bound = bounds.y)#
#
	write.table(ex3.global, file = paste(plotwd, "/Ex3_QP_data.csv", sep = ""), row.names = F, col.names = F)
ex3.global <- as.matrix(read.table(file = paste(plotwd, "/Ex3_QP_data.csv", sep = ""), header = F))
QPContour(ex3.global, dens = c(100, 100), x.bound = bounds.x, y.bound = bounds.y, c.parm = 5)
par(oma = c(0,1,0,2))#
	QPContour(surface = ex3.global, dens = c(100, 100), x.bound = bounds.x, y.bound = bounds.y, c.parm = 4, xlab = expression(italic("x")), ylab = expression(italic("y")), col.contour = c("#00A6FF", "#FFC300", "#FF1800"), n.contour.lines = 20)#
	k2dns <- seq(min(ex3.global, na.rm = T), max(ex3.global, na.rm = T), 0.01)#
	k2cut <- cut(k2dns, 100, label = FALSE)#
	crramp <- colorRampPalette(qp.col)#
	colr <- crramp(100)#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)
par(oma = c(0,1,0,2))#
	QPContour(surface = ex3.global, dens = c(100, 100), x.bound = bounds.x, y.bound = bounds.y, c.parm = 4, xlab = expression(italic("x")), ylab = expression(italic("y")), n.contour.lines = 20)#
	k2dns <- seq(min(ex3.global, na.rm = T), max(ex3.global, na.rm = T), 0.01)#
	k2cut <- cut(k2dns, 100, label = FALSE)#
	crramp <- colorRampPalette(qp.col)#
	colr <- crramp(100)#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)
png(file = paste(plotwd, "/Ex3_QP_contour.png", sep = ""), width = 400, height = 400)#
	par(oma = c(0,1,0,2))#
	QPContour(surface = ex3.global, dens = c(1000, 1000), x.bound = bounds.x, y.bound = bounds.y, c.parm = 4, xlab = expression(italic("x")), ylab = expression(italic("y")), n.contour.lines = 20)#
	k2dns <- seq(min(ex3.global, na.rm = T), max(ex3.global, na.rm = T), 0.01)#
	k2cut <- cut(k2dns, 100, label = FALSE)#
	crramp <- colorRampPalette(qp.col)#
	colr <- crramp(100)#
	legend.col(col = colr, lev = k2dns, xadj = 0.1)#
	dev.off()
rm(list = ls())
gc()
q()
